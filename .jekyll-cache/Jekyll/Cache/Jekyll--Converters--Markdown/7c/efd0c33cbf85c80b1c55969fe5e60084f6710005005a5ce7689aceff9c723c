I"O<h1 id="selection-sort">Selection Sort</h1>

<ul>
  <li>Selection Sort</li>
</ul>

<p><strong>선택 정렬</strong>은 <code class="language-plaintext highlighter-rouge">in-place</code> 비교 정렬 알고리즘이다. O(n^2) 시간 복잡도를 갖고 있고, 대규모 리스트에서는 비효율적이다. 일반적으로 <strong>삽입 정렬</strong>보다 성능이 떨어진다. 선택 정렬 알고리즘은 단순하여 사용할 수 있는 메모리가 제한적인 경우에 효과적이다.</p>

<h2 id="contents">Contents</h2>

<ol>
  <li>예시</li>
  <li>구현</li>
  <li>복잡도</li>
  <li>다른 정렬 알고리즘과 비교</li>
</ol>

<h2 id="예시">예시</h2>

<table class="wikitable">
<tbody><tr>
<th>Sorted sublist
</th>
<th>Unsorted sublist
</th>
<th>Least element in unsorted list
</th></tr>
<tr>
<td>()
</td>
<td style="text-align:right;">(11, 25, 12, 22, 64)
</td>
<td>11
</td></tr>
<tr>
<td>(11)
</td>
<td style="text-align:right;">(25, 12, 22, 64)
</td>
<td>12
</td></tr>
<tr>
<td>(11, 12)
</td>
<td style="text-align:right;">(25, 22, 64)
</td>
<td>22
</td></tr>
<tr>
<td>(11, 12, 22)
</td>
<td style="text-align:right;">(25, 64)
</td>
<td>25
</td></tr>
<tr>
<td>(11, 12, 22, 25)
</td>
<td style="text-align:right;">(64)
</td>
<td>64
</td></tr>
<tr>
<td>(11, 12, 22, 25, 64)
</td>
<td style="text-align:right;">()
</td>
<td>
</td></tr></tbody></table>

<h2 id="구현">구현</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">selectionSort</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
	<span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
	    <span class="n">indexMin</span> <span class="o">=</span> <span class="n">i</span>
		<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
			<span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">indexMin</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
				<span class="n">indexMin</span> <span class="o">=</span> <span class="n">j</span>
		<span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="n">indexMin</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">indexMin</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
	<span class="k">return</span> <span class="n">x</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="복잡도">복잡도</h2>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Avg</th>
      <th>Worst</th>
      <th>Stable</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Bubble  sort</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>YES</td>
    </tr>
    <tr>
      <td>Selection sort</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>NO</td>
    </tr>
    <tr>
      <td>Insertion sort</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>YES</td>
    </tr>
  </tbody>
</table>

<h2 id="다른-정렬-알고리즘과-비교">다른 정렬 알고리즘과 비교</h2>

<ul>
  <li>버블 정렬(bubble sort) : 시간 복잡도 Θ ( <em>n</em> 2 )인 정렬 알고리즘 중에서 선택 정렬은 버블 정렬보다 항상 우수하다.</li>
  <li>삽입 정렬(insertion sort) : 삽입 정렬은 k번째 반복 이후, 첫번째 k 요소가 정렬된 순서로 온다는 점에서 유사하다. 하지만 선택 정렬은 k+1 번째 요소를 찾기 위해 나머지 모든 요소들을 탐색하지만 삽입 정렬은 k+1 번째 요소를 배치하는 데 필요한 만큼의 요소만 탐색하기 때문에 훨씬 효율적으로 실행된다는 차이가 있다.</li>
</ul>
:ET